1. 채팅 서버
 - 클라이언트의 요구(명령)를 받아서 처리하는 서버
 - 일반적으로 채팅 서버는 멀티 스레드 서버인 것 같음
	- 왜냐? 여러 클라이언트들이 붙고, 빨리빨리 처리해줘야 하니까.
 - 이번에 만든 서버는 ChatServer와 ChatThread 클래스로 구성됨

2. 클라이언트
 - 채팅하는 각 이용자(컴퓨터)

3. 기본적으로 알아야 할 것
 - 서버 소켓(클라이언트를 기다리는 소켓)과 소켓(클라이언트 쪽에서 서버 소켓에 접속하는 소켓)이 연결되어야 동작함
 - 채팅 서버와 클라이언트는 입출력 스트림을 통해서 문자열을 주고 받음
	- 입력 스트림 : BufferedReader(new InputStreamReader((InputStream객체))
	- 출력 스트림 : PrintWriter(new OutputStreamWriter((OutputStream객체))
 - 스레드에 대한 이해가 필요함!!

4. 어떻게 코드를 짜야하나?

 - 정형화된 방법은 없으나, 내 의식의 흐름에 따라서 방법을 단계화 해보았다.

 - step 1) 채팅 서버를 구현한다
	- a. 서버 소켓 객체와 ChatServer(채팅 서버) 객체를 생성한다
	- b. 서버 소켓이 클라이언트의 명령을 accept() 메서드를 통해 받으면 ChatThread 객체에 인수로 넘겨줘 생성한다
	- c. 객체가 생성되면 실행하고, 벡터에 저장한다
	- d. 주의할 것은 여러 개의 클라이언트가 접속할 수 있도록 while(true)문으로 b~c가 계속 시행되도록 한다
 - step 2) 스레드 객체를 만든다
	- a. 인수로 넘겨받은 서버 소켓과 소켓을 저장해둔다
	- b. 자동으로 실행되는 run() 메서드 내부에 입출력 스트림을 만든다
	- c. while(true)문으로 readLine() 의 문자열을 받는다
	- d. 이때 문자열이 명령인지 말인지를 구분하여 처리해야 하므로 별개의 메서드를 하나 만들어서 처리한다
		- LOGIN => println("접속했습니다"), LOGOUT => 벡터에서 스레드 삭제 & disconnect() , TALK => 다른 클라이언트에 뿌려주기
 - step 3) 클라이언트 쪽을 구현한다
	- a. 소켓을 생성하고, 입출력스트림을 만든다
	- b. start() 메서드 내부에 서버의 데이터를 화면에 출력하는 스레드를 만든다
	- c. run() 메서드 내부에 while(true)문을 통해 화면에 출력하는 동작을 반복한다(readLine() 생각)
	- d. 이벤트리스너로 서버에 데이터를 보낸다(단, step2-d와 형식을 맞출 것!!!)
